refresh = 0, refresh = 0, seed = 4)
round(posterior_interval(int.1, prob = 0.90), 3)
int.2 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_inmate_cases*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.2, prob = 0.90), 3)
int.3 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ latest_inmate_population*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.3, prob = 0.90), 3)
int.4 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_officer_cases*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.4, prob = 0.90), 3)
int.5 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_officer_deaths*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.5, prob = 0.90), 3)
int.6 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ state_cases*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.6, prob = 0.90), 3)
int.7 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ state_deaths*.,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.7, prob = 0.90), 3)
full.int <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~
latest_inmate_population*(inmate_tests + total_officer_deaths + state_cases +
state_deaths + total_officer_cases) +
total_officer_deaths*(total_inmate_cases + total_officer_cases) +
state_cases*(state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(full.int, prob = 0.90), 3)
(BF.full.int <- bayesfactor_parameters(full.int, null = 0))
(loo.full.int <- loo(full.int, save_psis = T))
sig1 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(latest_inmate_population + total_officer_deaths) +
total_inmate_cases*(total_officer_deaths) +
latest_inmate_population*(total_officer_deaths + state_cases + state_deaths) +
total_officer_cases*(total_officer_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig1 <- bayesfactor_parameters(sig1, null = 0))
(loo.sig1 <- loo(sig1, save_psis = T))
loo.full.int
loo.best <- loo.sig1
sig2 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
total_inmate_cases*(total_officer_deaths) +
latest_inmate_population*(total_officer_deaths + state_cases + state_deaths) +
total_officer_cases*(total_officer_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig2 <- bayesfactor_parameters(sig2, null = 0))
(loo.sig2 <- loo(sig2, save_psis = T))
loo.best
loo.best <- loo.sig2
sig3 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
total_inmate_cases*(total_officer_deaths) +
latest_inmate_population*(total_officer_deaths + state_deaths) +
total_officer_cases*(total_officer_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig3 <- bayesfactor_parameters(sig3, null = 0))
(loo.sig3 <- loo(sig3, save_psis = T))
loo.best
loo.best <- loo.sig3
sig4 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
latest_inmate_population*(total_officer_deaths + state_deaths) +
total_officer_cases*(total_officer_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig4 <- bayesfactor_parameters(sig4, null = 0))
(loo.sig4 <- loo(sig4, save_psis = T))
loo.best
loo.best <- loo.sig4
sig5 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
latest_inmate_population*(state_deaths) +
total_officer_cases*(total_officer_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig5 <- bayesfactor_parameters(sig5, null = 0))
(loo.sig5 <- loo(sig5, save_psis = T))
loo.best
loo.best <- loo.sig5
sig6 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
latest_inmate_population*(state_deaths) +
state_cases*(total_officer_deaths + state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig6 <- bayesfactor_parameters(sig6, null = 0))
(loo.sig6 <- loo(sig6, save_psis = T))
loo.best
loo.best <- loo.sig6
sig7 <- stan_glm(data = sys.scaled.data,
formula =
total_inmate_deaths~ inmate_tests*(total_officer_deaths) +
latest_inmate_population*(state_deaths) +
state_cases*(state_deaths) + total_officer_deaths,
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(BF.sig7 <- bayesfactor_parameters(sig7, null = 0))
(loo.sig7 <- loo(sig7, save_psis = T))
loo.best
final.model <- sig7
mcmc_areas(final.model, prob=0.90)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(final.model$y),
yrep = posterior_predict(final.model, draws = 50))
int.1 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ inmate_tests*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 4)
round(posterior_interval(int.1, prob = 0.90), 3)
int.2 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_inmate_cases*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.2, prob = 0.90), 3)
int.3 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ latest_inmate_population*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.3, prob = 0.90), 3)
int.4 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_officer_cases*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.4, prob = 0.90), 3)
int.5 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_officer_deaths*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.5, prob = 0.90), 3)
int.6 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ state_cases*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.6, prob = 0.90), 3)
int.7 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ state_deaths*.,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(int.7, prob = 0.90), 3)
sig.0 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_inmate_cases +
total_officer_deaths + total_officer_cases*(state_deaths)
+ latest_inmate_population*(state_deaths) + inmate_tests,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(sig.0, prob = 0.90), 3)
mcmc_areas(sig.0, prob=0.90)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
(loo.sig0 <- loo(sig.0, save_psis = T))
loo.nb1
loo_compare(loo.sig0, loo.nb1)
(BF.sig0 <- bayesfactor_parameters(sig.0, null = 0))
loo.sig0
loo.full.int
loo_compare(loo.sig0, loo.full.int)
prior_summary.stanreg(sig.0)
prior_summary(sig.0)
prior_summary(full.int)
systems %>%
summarise(mean = mean(total_inmate_deaths),
sd = sd(total_inmate_deaths),
variance = var(total_inmate_deaths),
IQR = IQR(total_inmate_deaths),
outlier_limit = mean(total_inmate_deaths) + 1.5*IQR(total_inmate_deaths))
nonoutliers.systems <- systems %>%
filter(total_inmate_deaths <= 110.4)
systems %>%
summarise(mean = mean(total_inmate_deaths),
sd = sd(total_inmate_deaths),
variance = var(total_inmate_deaths),
IQR = IQR(total_inmate_deaths),
outlier_limit = mean(total_inmate_deaths) + 1.5*IQR(total_inmate_deaths))
nonoutliers.systems <- systems %>%
filter(total_inmate_deaths <= 110.4)
systems %>%
filter(total_inmate_deaths > 110.4) %>%
group_by(system) %>%
summarise(n=n())
(nb.psis <- psis(loo.sig0))
(nb.psis <- psis(sig.0))
plot(sig.0)
plot(full.int)
plot(loo.sig0, label_points=TRUE)
plot(loo.full.int, label_points=TRUE)
outliers <- rep(0, nrow(systems))
outliers[5] <- 1
outliers[9] <- 1
outliers[28] <- 1
outliers[43] <- 1
systems["outliers"] <- outliers
systems %>%
filter(outliers == 1) %>%
summarise(sys = system,
inmate.deaths = total_inmate_deaths)
nev.data.only<- systems %>%
filter(system != "Nevada") %>%
select(-c("system", "outliers"))
nev.data.only$latest_inmate_population <- scale(nev.data.only$latest_inmate_population)
nev.data.only$total_inmate_cases <- scale(nev.data.only$total_inmate_cases)
nev.data.only$total_officer_cases <- scale(nev.data.only$total_officer_cases)
nev.data.only$total_officer_deaths <- scale(nev.data.only$total_officer_deaths)
nev.data.only$inmate_tests <- scale(nev.data.only$inmate_tests)
nev.data.only$state_cases <- scale(nev.data.only$state_cases)
nev.data.only$state_deaths <- scale(nev.data.only$state_deaths)
nb.nev <- stan_glm(data = nev.data.only,
formula = total_inmate_deaths~ total_inmate_cases +
total_officer_deaths + total_officer_cases*(state_deaths)
+ latest_inmate_population*(state_deaths) + inmate_tests,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
norm.nev <- stan_glm(data = nev.data.only,
formula = total_inmate_deaths~
latest_inmate_population*(inmate_tests + total_officer_deaths + state_cases +
state_deaths + total_officer_cases) +
total_officer_deaths*(total_inmate_cases + total_officer_cases) +
state_cases*(state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(loo.nb.nev <- loo(nb.nev, save_psis = T))
(loo.norm.nev <- loo(norm.nev, save_psis = T))
loo_compare(loo.nb.nev, loo.norm.nev)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(nb.nev$y),
yrep = posterior_predict(nb.nev, draws = 50))
?ppc_dens_overlay
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50),
trim = TRUE)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(nb.nev$y),
yrep = posterior_predict(nb.nev, draws = 50),
trim = TRUE)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(nb.nev$y),
yrep = posterior_predict(nb.nev, draws = 50))
no.outliers <- systems %>%
filter(system != "Nevada" & system != "California" & system != "Texas" & system != "Florida") %>%
select(-c("system", "outliers"))
no.outliers$latest_inmate_population <- scale(no.outliers$latest_inmate_population)
no.outliers$total_inmate_cases <- scale(no.outliers$total_inmate_cases)
no.outliers$total_officer_cases <- scale(no.outliers$total_officer_cases)
no.outliers$total_officer_deaths <- scale(no.outliers$total_officer_deaths)
no.outliers$inmate_tests <- scale(no.outliers$inmate_tests)
no.outliers$state_cases <- scale(no.outliers$state_cases)
no.outliers$state_deaths <- scale(no.outliers$state_deaths)
no.nb <- stan_glm(data = no.outliers,
formula = total_inmate_deaths~ total_inmate_cases +
total_officer_deaths + total_officer_cases*(state_deaths)
+ latest_inmate_population*(state_deaths) + inmate_tests,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
no.norm <- stan_glm(data = no.outliers,
formula = total_inmate_deaths~
latest_inmate_population*(inmate_tests + total_officer_deaths + state_cases +
state_deaths + total_officer_cases) +
total_officer_deaths*(total_inmate_cases + total_officer_cases) +
state_cases*(state_deaths),
family= gaussian(),
refresh = 0, refresh = 0, seed = 5)
(loo.no.nb <- loo(no.nb, save_psis = T))
(loo.no.norm <- loo(no.norm, save_psis = T))
loo_compare(loo.no.nb, loo.no.norm)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(no.nb$y),
yrep = posterior_predict(no.nb, draws = 50))
cases_recent %>%
filter(date = "2021-03-31") %>%
summarise(n= state_cases)
cases_recent %>%
filter(date == "2021-03-31") %>%
summarise(n = state_cases)
cases_recent %>%
filter(date == "2021-03-31") %>%
summarise(n = cases)
cases_recent %>%
filter(date == "2021-03-31") %>%
summarise(n = cases, state = state)
prior_summary(sig.0)
prior_summary(full.int)
(BF.sig0 <- bayesfactor_parameters(sig.0, null = 0))
mcmc_areas(sig.0, prob=0.90)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
sig.0 <- stan_glm(data = nrv.scaled.data,
formula = total_inmate_deaths~ total_inmate_cases +
total_officer_deaths + total_officer_cases*(state_deaths)
+ latest_inmate_population*(state_deaths) + inmate_tests,
family= neg_binomial_2(link="log"),
refresh = 0, refresh = 0, seed = 5)
round(posterior_interval(sig.0, prob = 0.90), 3)
mcmc_areas(sig.0, prob=0.90)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
coef(sig.0)
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(nb.nev$y),
yrep = posterior_predict(nb.nev, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(sig.0$y),
yrep = posterior_predict(sig.0, draws = 50))
color_scheme_set("red")
ppc_dens_overlay(y = as.vector(nb.nev$y),
yrep = posterior_predict(nb.nev, draws = 50))
systems %>%
ggplot(aes(x=total_inmate_deaths)) + geom_density()
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(magrittr)
library(readr)
library(tidyverse)
library(gridExtra)
library(rstan)
library(bayesplot)
library(loo)
library(rstanarm)
library(bayestestR)
library(brms)
cases_recent <- read_csv(file="../us-states.csv")
systems.full <- read.csv(file="../prisons/systems.csv")
# filter for cummulative counts on 3/31/2021
state.cases <- cases_recent %>%
filter(date == "2021-03-31") %>%
select(-c("date", "fips"))
# drop unimportant columns & add overall state data
systems <- systems.full %>%
inner_join(state.cases,by=c("system" = "state")) %>%
select(-c(max_inmate_population_2020))
# rename state data columns
colnames(systems)[8] <- "state_cases"
colnames(systems)[9] <- "state_deaths"
# drop NA's
systems <- drop_na(systems)
systems %>%
ggplot(aes(x=total_inmate_deaths)) + geom_density()
systems %>%
ggplot(aes(x=total_inmate_deaths)) + geom_density() + labs(main = "Total Inmate Deaths")
knitr::opts_chunk$set(echo = TRUE)
systems %>%
ggplot(aes(x=total_inmate_deaths)) + geom_density()
p1 <- systems %>%
ggplot(aes(x=latest_inmate_population, y = total_inmate_deaths)) + geom_point() +
labs(x = "Latest Inmate Population", y = "Inmate Deaths")
p2 <- systems %>%
ggplot(aes(x=total_inmate_cases, y = total_inmate_deaths)) + geom_point() +
labs(x = "Total Inmate Cases", y = "Inmate Deaths")
p3 <- systems %>%
ggplot(aes(x=total_officer_cases, y = total_inmate_deaths)) + geom_point() +
labs(x = "Total Officer Cases", y = "Inmate Deaths")
p4 <- systems %>%
ggplot(aes(x=total_officer_deaths, y = total_inmate_deaths)) + geom_point() +
labs(x = "Total Officer Deaths", y = "Inmate Deaths")
p5 <- systems %>%
ggplot(aes(x=inmate_tests, y = total_inmate_deaths)) + geom_point() +
labs(x = "Inmate Tests", y = "Inmate Deaths")
p6 <- systems %>%
ggplot(aes(x=state_deaths, y = total_inmate_deaths)) + geom_point() +
labs(x = "State Deaths", y = "Inmate Deaths")
p7 <- systems %>%
ggplot(aes(x=state_cases, y = total_inmate_deaths)) + geom_point() +
labs(x = "State Cases", y = "Inmate Deaths")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol=2)
knitr::opts_chunk$set(echo = TRUE)
p1 <-facilities %>%
ggplot(aes(x=total_inmate_cases, y=total_inmate_deaths)) + geom_point() +
labs(x="Inmate Cases", y= "Inmate Deaths", title="Inmate Deaths v. Cases")
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(magrittr)
library(readr)
library(tidyverse)
library(gridExtra)
mask_use <- read_csv(file="../mask-use/mask-use-by-county.csv")
cases_total <- read_csv(file="../us-counties.csv")
cases_recent <- read_csv(file="../us-counties-recent.csv")
prison_facilities <- read_csv(file="../prisons/facilities.csv")
systems <- read.csv(file="../prisons/systems.csv")
# grouping county level data to create state wide totals
state_total <- cases_total %>%
group_by(state, date) %>%
summarise(total.cases = sum(cases),
total.deaths = sum(deaths),
count = n())
state_recent <- cases_recent %>%
group_by(state, date) %>%
summarise(total.cases = sum(cases),
total.deaths = sum(deaths),
count = n())
# add mask usage data to recent data by county
colnames(mask_use)[1] <- "fips"
county_rankings <- inner_join(cases_recent, mask_use, by = "fips")
group_by(prison_facilities, facility_type) %>%
summarise(count = n())
# remove reservation jail observation
# remove US Marshall's observation
prison_facilities <- prison_facilities %>%
filter(facility_type != "Reservation jail" & facility_type != "U.S. Marshalls")
group_by(prison_facilities, facility_type) %>%
summarise(count = n())
# add grouped facility type variable by federal or state facility
# add prison variable which indicates that facility is a prison
federal_facility <- rep(0, nrow(prison_facilities))
prison_facilities["federal"] <- federal_facility
state_facility <- rep(0, nrow(prison_facilities))
prison_facilities["state"] <- state_facility
facility_group <- rep(0, nrow(prison_facilities))
prison_facilities["facility_group"] <- facility_group
prison <- rep(0, nrow(prison_facilities))
prison_facilities["prison"] <- prison
prison_facilities <- prison_facilities %>%
mutate (federal = case_when(
facility_type == "Federal halfway house"~ 1,
facility_type == "Federal prison"~ 1,
TRUE ~ 0)) %>%
mutate (state = case_when(
facility_type == "State facility"~ 1,
facility_type == "State halfway house"~ 1,
facility_type == "State juvenile detention"~ 1,
facility_type == "State prison"~ 1,
facility_type == "State rehabilitation center"~ 1,
facility_type == "State work camp"~ 1,
TRUE ~ 0)) %>%
mutate(facility_group = case_when(
federal == 1 ~ 2,
state == 1 ~ 1,
TRUE ~ 0)) %>%
mutate(prison = case_when(
facility_type == "State prison"~ 1,
facility_type == "Federal prison"~ 1,
TRUE ~ 0))
group_by(prison_facilities, prison, facility_type) %>%
summarise(count = n())
# drop unimportant columns
facilities <- select(prison_facilities, -c(nyt_id, facility_lng, facility_lat, max_inmate_population_2020, note,
facility_city))
# drop rows with na values for variables of interest
facilities <- drop_na(facilities)
p1 <-facilities %>%
ggplot(aes(x=facility_group)) + geom_bar() + labs(x="Facility Type", title="State, Federal or Local Facility")
p2 <-facilities %>%
ggplot(aes(x=prison)) + geom_bar() + labs(x="Prison", title="Prison v. Other Facility Types")
grid.arrange(p1, p2, ncol=2)
p1 <-facilities %>%
ggplot(aes(x=total_inmate_cases, y=total_inmate_deaths)) + geom_point() +
labs(x="Inmate Cases", y= "Inmate Deaths", title="Inmate Deaths v. Cases")
p2 <-facilities %>%
ggplot(aes(x=total_officer_cases, y=total_officer_deaths)) + geom_point() +
labs(x="Officer Cases", y= "Officer Deaths", title="Officer Deaths v. Cases")
p3 <-facilities %>%
ggplot(aes(x=total_inmate_cases, y=total_officer_cases)) + geom_point() +
labs(x="Inmate Cases", y= "Officer Cases", title="Inmate v. Officer Cases")
p4 <-facilities %>%
ggplot(aes(x=total_inmate_deaths, y=total_officer_deaths)) + geom_point() +
labs(x="Inmate Deaths", y= "Officer Deaths", title="Inmate v. Officer Deaths")
grid.arrange(p1, p2, p3, p4, ncol=2)
p1 <-sys.data %>%
ggplot(aes(x=total_inmate_cases, y=latest_inmate_population)) + geom_point() +
labs(x="Inmate Cases", y= "Inmate Population", title="Inmate Cases v. Inmate Population")
p2 <-sys.data %>%
ggplot(aes(x=total_officer_cases, y=total_officer_deaths)) + geom_point() +
labs(x="Officer Cases", y= "Officer Deaths", title="Officer Cases v. Officer Deaths")
p3 <-sys.data %>%
ggplot(aes(x=total_inmate_cases, y=total_officer_cases)) + geom_point() +
labs(x="Inmate Cases", y= "Officer Cases", title="Inmate Cases v. Officer Cases")
p4 <-sys.data %>%
ggplot(aes(x=state_cases, y=state_deaths)) + geom_point() +
labs(x="State Cases", y= "State Deaths", title="State Cases v. State Deaths")
grid.arrange(p1, p2, p3, p4, ncol=2)
